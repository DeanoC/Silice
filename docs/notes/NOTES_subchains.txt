The goal is to chain subroutines without an extra cycle in between.

Subroutines could have "input sets" and "output sets"
=> determined at compile time and set upon call (before a chain is called)
=> switch cases (low cost, fixed logic)
The current mechanism is the 'generic set' but it requires a setup before each call.
Instead we can thread together subroutine calls sharing in/outs using these in/out sets.

(c,d) <- sub1 <- (a,b);
(e,f) <- sub2 <- (c,d);

We can directly chain sub1 to sub2 with a dedicated output set for sub1 (a,b) and input set for sub2 (a,b) as well.

Easy: every time a subroutine uses the output of a previous one as input, construct a special set
More elaborate: try to minimize number of sets, doing partial sets?

(c,d) <- sub1 <- (a,b);
(e,f) <- sub2 <- (c,d,z); // c,d reused
(h,i) <- sub3 <- (c,e,y); // c reused from 1, e reused from 2

This is akin to 'input/output' registers for an instruction set, where the operand/instruction
selects which registers are used for in/out.

NOTE: what if expressions are used? This can still be defined as an input set, as long as it
is combinational.

(c,d) <- sub1 <- (a,b);
(e,f) <- sub2 <- (c+d*3); // here, c+d*3 can be encoded in the input set for sub2

NOTE: (probably?) this mechanism only triggers in chained calls

(c) <- add <- (a,b)
(d) <- sub <- (c,e) // c,e is a special set to chain

---

Conceptually, once subroutine chains are available, writing a chain is almost
like writing a program where the subroutines are instructions. 
